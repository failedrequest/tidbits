#!/bin/sh
# Mark Saad 6Jun2018 nonesuch@longcount.org
# Adapted from the mfsbsd zfsinstall
#
#
FREEBSD_MIRROR="${FREEBSD_MIRROR:-ftp://ftp.freebsd.org/pub/FreeBSD}"

usage() {
	echo "Usage: $0 [-h] -d geom_provider [ -u dist_url ] -s swap_partition_size -r root_partition_size  -v var_partition_size [ -k ssh_key_url ] "
}

osarch() {
	/sbin/sysctl -n hw.machine_arch
}

osrelease() {
	/sbin/sysctl -n kern.osrelease | /usr/bin/sed -E -e 's,-p[0-9]+$,,g'
}

help() {
	echo "I install freebsd with ufs EXAMPLE: $0 -d targetdev -r rootsize -v varsize -s swapsize"

}

while getopts d:u:r:k:v:s:h o; do
	case "$o" in
        	d) DEV="$DEV ${OPTARG##/dev/}" ;;
		u) URL="${OPTARG}" ;;
		k) SSH="${OPTARG}" ;;
                r) ROOT="${OPTARG}" ;;
                v) VAR="${OPTARG}" ;;
		s) SWAP="${OPTARG}" ;;
		h) help; exit 1;;
		[?]) usage; exit 1;;
esac
done

if [ -z "${DEV}" ]; then
  echo "===> You need to define a target device -d"
  exit 1
elif [ -z "${ROOT}" ]; then
  echo "===> You need to define a rootfs size -r"
  exit 1
elif [ -z "${VAR}" ]; then
  echo "===> You need to define a varfs size -v"
  exit 1
elif [ -z "${SWAP}" ]; then
  echo "===> You need to define a swap size -s "
 exit 1
fi


# Create GPT
	echo "=== Creating GUID partitions on ${DEV} ==="
	/sbin/gpart create -s GPT ${DEV}
	/sbin/gpart add -t freebsd-boot -b 40 -s 512K ${DEV} 
        /sbin/gpart add -t freebsd-swap -l swap -s ${SWAP} ${DEV}
        /sbin/gpart add -t freebsd-ufs -l rootfs -s ${ROOT} ${DEV}
        /sbin/gpart add -t freebsd-ufs -l varfs -s ${VAR} ${DEV} 
        /sbin/gpart bootcode -b /boot/pmbr -p /boot/gptboot -i 1 ${DEV}

 # Format them
	echo "=== Formating the partitions on ${DEV} === "
       /sbin/newfs -Uj ${DEV}p3  
       /sbin/newfs -Uj ${DEV}p4  

#Mount the disks and extract the setup

mount /dev/gpt/rootfs /mnt && mkdir /mnt/var && mount /dev/gpt/varfs /mnt/var && mkdir /mnt/tmp


EXTRACT_FILES="/tmp/base.txz /tmp/kernel.txz"

if [ -z "${URL}" ]; then
	if [ -z "${ARCHIVE}" ]; then
		URL="${FREEBSD_MIRROR}/releases/$(osarch)/$(osrelease)"
	elif ! [ -f "${ARCHIVE}" ]; then
		echo "Error: file $ARCHIVE does not exist"
		exit 1
	else
		EXTRACT_FILES=${ARCHIVE}
	fi
else
	if [ -d "${URL}" ]; then
		for file in base.txz kernel.txz; do
			if ! [ -f "${URL}/${file}" ]; then
				echo "File not found: ${URL}/${file}"
				exit 1
			fi
		done
		EXTRACT_FILES="${URL}/base.txz ${URL}/kernel.txz"
	fi
fi

# Fetch base.txz and kernel.txz

if [ -n "${URL}" -a ! -d "${URL}" ]; then
	echo "=== Fetching base files from: $URL ==="
	if ! /usr/bin/fetch -o /mnt/tmp/base.txz "${URL}/base.txz"; then
		echo "Error fetching ${URL}/base.txz"
		exit 1
	elif ! /usr/bin/fetch -o /mnt/tmp/kernel.txz "${URL}/kernel.txz"; then
		echo "Error fetching ${URL}/kernel.txz"
		exit 1
	fi
fi



echo "=== Extracting Kernel ==="
tar -zxpf /mnt/tmp/kernel.txz -C /mnt
echo "=== Extracting Base ==="
tar -zxpf /mnt/tmp/base.txz -C /mnt

echo "=== Minimal Config ==="
echo "hostname=\"freebsd-server00\"" >> /mnt/etc/rc.conf
echo "ifconfig_DEFAULT=\"DHCP\"" >> /mnt/etc/rc.conf
echo "sshd_enable=\"YES\"" >> /mnt/etc/rc.conf
echo "PermitRootLogin yes" >> /mnt/etc/ssh/sshd_config

cat << EOF > /mnt/etc/fstab
/dev/gpt/swap none            swap    sw      0       0
/dev/gpt/rootfs       /               ufs     rw,noatime      1       1
/dev/gpt/varfs        /var            ufs     rw,noatime      2       2
EOF

cat << EOF > /mnt/etc/resolv.conf
search longcount.org
nameserver 8.8.8.8
nameserver 8.8.4.4
options timeout:1 attempts:5 rotate
EOF

if [ "${SSH}" ]; then
   echo "Deploy Root's authorized_keys"
   mkdir /mnt/root/.ssh/
   chmod 700 /mnt/root/.ssh
   fetch -o /mnt/root/.ssh/authorized_keys ${SSH}
   echo "================== Done =================="
else
  echo "==> Set root password or deploy a ssh public key before rebooting"
fi

echo "=== Unmount /mnt/var and /mnt before rebooting ==="
